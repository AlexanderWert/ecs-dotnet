@using RazorLight
@using System.Linq
@using System.Collections.Generic
@using CsQuery.ExtensionMethods.Internal
@using Generator
@using Newtonsoft.Json
@inherits Generator.CodeTemplatePage<Generator.Schema.ECSSpecification>
// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.Net;
using System.Runtime.Serialization;

namespace Elastic
{
    /// <summary>
    /// Elastic Common Schema for version @(Model.YamlSchemas.First().DownloadBranch).
    /// <para/>
    /// The Elastic Common Schema (ECS) defines a common set of fields for ingesting data into Elasticsearch.
    /// A common schema helps you correlate data from sources like logs and metrics or IT operations analytics
    /// and security analytics.
    /// <para/>
    /// https://github.com/elastic/ecs
    /// </summary>
    public class CommonSchema
    {
    @foreach (var schema in Model.YamlSchemas.Where(m => m.Name != "base"))
    {
<text>        /// <summary>
        /// @Raw(schema.DescriptionSanitized)
        /// </summary>
        [DataMember(Name = "@Raw(schema.Name)")]
        public @FileGenerator.PascalCase(schema.Name) @FileGenerator.PascalCase(schema.Name) { get; set; }

</text>
    }
@foreach (var field in Model.YamlSchemas.Single(m => m.Name == "base").GetFields())
{
<text>        /// <summary>
        /// @Raw(field.DescriptionSanitized)
        /// </summary>
        /// <remarks>@field.Level.ToString("f")</remarks>
        @if (field.Example != null)
        {
<text>        /// <example>@Raw(JsonConvert.SerializeObject(field.Example).Trim('"'))</example>
</text>
        }
        [DataMember(Name = "@Raw(field.JsonFieldName)")]
        public @Raw(field.ClrType) @(field.PropertyName) { get; set; }

</text> 
}
    }

    @foreach (var schema in Model.YamlSchemas.Where(m => m.Name != "base"))
    {
<text>    /// <summary>
    /// @Raw(schema.DescriptionSanitized)
    /// </summary>
    @if (!schema.Footnote.IsNullOrEmpty())
    {
<text>    /// <remarks>
    /// @Raw(schema.Footnote)
    /// </remarks>
</text>
    }
    public class @FileGenerator.PascalCase(schema.Name) 
    {
    @foreach (var field in schema.GetFields())
    {
<text>        /// <summary>
        /// @Raw(field.DescriptionSanitized)
        /// </summary>
        /// <remarks>@field.Level.ToString("f")</remarks>
        @if (field.Example != null)
        {
<text>        /// <example>@Raw(JsonConvert.SerializeObject(field.Example).Trim('"'))</example>
</text> 
        }
        [DataMember(Name = "@Raw(field.JsonFieldName)")]
        public @Raw(field.ClrType) @(field.PropertyName) { get; set; }

</text>}
    }

</text>
    }
    /// <summary>
    /// Elastic Common Schema templates for version @(Model.YamlSchemas.First().DownloadBranch).
    /// <para/>
    /// These templates can be run against Elasticsearch to create index templates for ECS version @(Model.YamlSchemas.First().DownloadBranch).
    /// </summary>
    public class CommonSchemaTemplates
    {
@foreach (var template in Model.Templates)
{
<text>        /// <summary>
        /// ECS Template for Elasticsearch @template.Key
        /// </summary>
        public static string GetIndexTemplateForElasticsearch@(template.Key)() { return "@Raw(System.Text.RegularExpressions.Regex.Replace(template.Value, @"\r\n?|\n", "").Replace("\"", "\\\""))"; }

</text>}
    }
}